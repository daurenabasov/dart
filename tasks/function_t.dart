// ignore: slash_for_doc_comments
/**
 * Конечно! Вот 10 задач на тему функций на языке Dart:

Напишите функцию, которая принимает два аргумента (числа) и возвращает их сумму.

Напишите функцию, которая принимает число в качестве аргумента и возвращает его квадрат.

Напишите функцию, которая принимает список чисел и возвращает среднее значение этого списка.

Напишите функцию, которая принимает список строк и возвращает новый список, содержащий только те строки, которые начинаются с определенной буквы.

Напишите функцию, которая принимает список чисел и возвращает список квадратов этих чисел.

Напишите функцию, которая принимает строку и возвращает ее длину.

Напишите функцию, которая принимает число и проверяет, является ли оно простым (не имеет делителей, кроме 1 и самого себя).

Напишите функцию, которая принимает число и возвращает его факториал (произведение всех положительных целых чисел от 1 до этого числа).

Напишите функцию, которая принимает список чисел и возвращает наибольшее и наименьшее значения из этого списка.

Напишите функцию, которая принимает две строки и проверяет, является ли одна строка анаграммой другой (содержит те же символы, но в другом порядке).

Надеюсь, эти задачи помогут вам практиковаться в работе с функциями на языке Dart!
 */

// 1
// num sum(num a, num b) => a + b;

// void main() => print(sum(10, 20));

// 2

// num square(num a) {
//   return a * a;
// }

// void main() => print(square(10));

// 3

// int getAverage(List<int> arr) {
//   var sum = 0; // объявляем переменную, в которой будет храниться сумма всех чисел массива
//   for (var i = 0; i < arr.length; i += 1) { // инициализируем цикл
//     sum = sum + arr[i];// на каждой итерации прибавляем к сумме значение текущего элемента массива
//   }
//   final value = sum / arr.length;  // возвращаем среднее арифметическое

//   return value.round();
// }

// int? main() {
//   List<int> array = [123, 2142141, 4312312312, 412312312, 312];

//   final average = getAverage(array);
//   print(average);
// }

// 4

// List<String> getString(List<String> arr) {
//   final filterArr = arr.where((str) => str.startsWith("H"));
//   return filterArr.toList();
// }

// List<String> arrString = ["hello", "Hello", "salam", "Okey", "lol"];
// void main() => print(getString(arrString));

// 5

// List<int> getSquareItems(List<int> arr) {
//   final square = arr.map((int element) => element * element).toList();

//   return square;
// }

// final myArray = [1,2,3,4,5];

// void main()=> print(getSquareItems(myArray));

// 6
// int getLengthString(String str) {
//   var strLength = 0;
//   for (var i = 0; i < str.length; i++) {
//     strLength++;
//   }
//   return strLength;
// }

// void main() => print(getLengthString("str"));

// 7

// bool getPrimeNumbers(int n) {
//   if (n <= 1) {
//     return false;
//   }

//   for (int i = 2; i <= n / 2; i++) {
//     if (n % i == 0) {
//       return false;
//     }
//   }

//   return true;
// }

// void main() => print(getPrimeNumbers(5));

// 8

// int factorial(int n) {
//   if (n == 1) {
//     return 1;
//   }

//   return n * factorial(n - 1);
// }

// void main() => print(factorial(5));

// // 9
// List<int?>? isMinMax(List<int> arr) {
//   if (arr.length == 0) {
//     return [null, null];
//   }

//   var min = arr[
//       0]; // Инициализируем переменную наименьшего значения первым элементом списка
//   var max = arr[
//       0]; // Инициализируем переменную наибольшего значения первым элементом списка

//   for (var i = 0; i < arr.length; i++) {
//     if (arr[i] < min) {
//       // Если текущий элемент меньше наименьшего значения
//       min = arr[i]; // Обновляем наименьшее значение
//     }
//     if (arr[i] > max) {
//       // Если текущий элемент больше наибольшего значения
//       max = arr[i]; // Обновляем наибольшее значение
//     }
//   }
//   return [min, max];
// }

// var myArr = [
//   21312,
//   31241343,
//   1432536,
//   1354,
//   12,
//   412,
//   34,
//   0,
//   213,
//   12,
//   312,
//   3,
//   213
// ];
// void main() => print(isMinMax(myArr));

// 10

bool? annagramma(String str1, String str2) {
  if (str1.isEmpty || str2.isEmpty) {
    return false;
  }
  str1 = str1.toLowerCase();
  str2 = str2.toLowerCase();

  // Создаем объекты для подсчета количества символов в каждом слове
  var charCount1 = {};
  var charCount2 = {};

  // Перебираем символы в первом слове и увеличиваем соответствующее значение в charCount1

  for (var i = 0; i < str1.length; i++) {
    var char = str1[i];
    charCount1[char] = (charCount1[char] ?? 0) + 1;
  }

  for (var i = 0; i < str2.length; i++) {
    var char = str2[i];
    charCount2[char] = (charCount2[char] ?? 0) + 1;
  }

  // Проверяем, что количество символов в обоих словах одинаковое
  for (var char in charCount1.keys) {
    if (charCount1[char] != charCount2[char]) {
      return false;
    }
  }
  return true;
}

// ignore: slash_for_doc_comments
/**
 * 
 * Эта функция принимает две строки (str1 и str2) и проверяет, являются ли они анаграммами друг друга. Анаграммы - это слова или фразы, состоящие из одних и тех же символов, но расположенных в другом порядке.

В начале функции мы проверяем, что хотя бы одна из строк пуста. Если это так, то сразу возвращаем false, так как анаграммы не могут быть образованы из пустых строк.

Затем мы создаем два объекта charCount1 и charCount2, которые будут использоваться для подсчета количества каждого символа в обеих строках. Эти объекты представлены в виде Map (ассоциативного массива), где символы являются ключами, а значениями являются их частоты.

Затем мы проходим по символам первой строки (str1) и увеличиваем соответствующее значение в charCount1 для каждого символа. Аналогично, проходим по символам второй строки (str2) и увеличиваем соответствующее значение в charCount2.

После этого мы сравниваем количество символов в обоих строках, проверяя, что для каждого символа количество в charCount1 равно количеству в charCount2. Если мы находим хотя бы одно несоответствие, то возвращаем false, так как строки не являются анаграммами.

Если все проверки прошли успешно, значит строки являются анаграммами, и мы возвращаем true.

Таким образом, исправленная функция annagramma выполняет подсчет символов в двух строках и сравнивает их, чтобы определить, являются ли они анаграммами.
 */
void main() => print(annagramma("Hello", "hello"));
